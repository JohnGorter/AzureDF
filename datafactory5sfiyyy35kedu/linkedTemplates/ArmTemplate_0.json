{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactory5sfiyyy35kedu"
		},
		"ArmtemplateStorageLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ArmtemplateStorageLinkedService'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ArmtemplateStorageLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ArmtemplateStorageLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArmtemplateTestDatasetIn')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ArmtemplateStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB2.csv",
						"folderPath": "input",
						"container": "datafactory"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ArmtemplateStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArmtemplateTestDatasetOut')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ArmtemplateStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "datafactory"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ArmtemplateStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "ImportedData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_1al')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Intus_bewerkte_file",
						"folderPath": "output",
						"container": "datafactory"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_6e1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB2.csv",
						"folderPath": "output",
						"container": "datafactory"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_6e1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB2.csv",
						"folderPath": "input",
						"container": "datafactory"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_hist_timeinterval')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "hist_timeinterval_Ricky_is_Echt_heel_goed.json",
						"folderPath": "input",
						"container": "datafactory"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"changed": {
							"type": "string"
						},
						"version": {
							"type": "integer"
						},
						"resource_id": {
							"type": "integer"
						},
						"labourhist_id": {
							"type": "integer"
						},
						"rosterdate": {
							"type": "string"
						},
						"rosterline": {
							"type": "integer"
						},
						"shift_id": {
							"type": "integer"
						},
						"plannedprop_id": {
							"type": "integer"
						},
						"overrulinggroup_id": {
							"type": "null"
						},
						"timetype_id": {
							"type": "integer"
						},
						"starttime": {
							"type": "string"
						},
						"endtime": {
							"type": "string"
						},
						"starttimeminutes": {
							"type": "integer"
						},
						"endtimeminutes": {
							"type": "integer"
						},
						"workedhours": {
							"type": "number"
						},
						"nr": {
							"type": "integer"
						},
						"timeintervalcount": {
							"type": "integer"
						},
						"labourhistgroup_id": {
							"type": "integer"
						},
						"originallabourhistgroup_id": {
							"type": "integer"
						},
						"plannedresourcegroup_id": {
							"type": "integer"
						},
						"hist_roster_id": {
							"type": "integer"
						},
						"rdp_nr": {
							"type": "integer"
						},
						"GAVIN_IS_COOL": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_ref_resource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ref_resource.json",
						"folderPath": "input",
						"container": "datafactory"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"changed": {
							"type": "string"
						},
						"version": {
							"type": "integer"
						},
						"deleted": {
							"type": "integer"
						},
						"externalid": {
							"type": "string"
						},
						"uname": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"resourcetype": {
							"type": "integer"
						},
						"resourcecolor": {
							"type": "string"
						},
						"firstname": {
							"type": "string"
						},
						"lastname": {
							"type": "string"
						},
						"lastnameprefix": {
							"type": "string"
						},
						"maidenname": {
							"type": "string"
						},
						"maidennameprefix": {
							"type": "string"
						},
						"birthdate": {
							"type": "string"
						},
						"gender": {
							"type": "string"
						},
						"email": {
							"type": "string"
						},
						"phone": {
							"type": "string"
						},
						"sms": {
							"type": "string"
						},
						"prefcontact": {
							"type": "integer"
						},
						"address_street": {
							"type": "string"
						},
						"address_housenumber": {
							"type": "string"
						},
						"address_housenumbersuffix": {
							"type": "string"
						},
						"address_postalcode": {
							"type": "string"
						},
						"address_locality": {
							"type": "string"
						},
						"address_countrycode": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_ref_resourcegroup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ref_resourcegroup.json",
						"folderPath": "input",
						"container": "datafactory"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"changed": {
							"type": "string"
						},
						"version": {
							"type": "integer"
						},
						"active": {
							"type": "integer"
						},
						"deleted": {
							"type": "integer"
						},
						"externalid": {
							"type": "string"
						},
						"uname": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"email": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArmtemplateSampleCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MyCopyActivity",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ArmtemplateTestDatasetIn",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ArmtemplateTestDatasetOut",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-20T09:55:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ArmtemplateTestDatasetIn')]",
				"[concat(variables('factoryId'), '/datasets/ArmtemplateTestDatasetOut')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_6e1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_6e1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "datafactory/input/moviesDB2.csv"
							},
							{
								"name": "Destination",
								"value": "datafactory/output/moviesDB2.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_6e1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_6e1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-20T10:11:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_6e1')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_6e1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_Intus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Intus 1e test",
				"activities": [
					{
						"name": "Pipe_hist_timeinterval",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "datafactory/input/hist_timeinterval_Ricky_is_Echt_heel_goed.json"
							},
							{
								"name": "Destination",
								"value": "datafactory/output/Intus_bewerkte_file"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "GAVIN_IS_COOL",
										"value": "NO"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"path": "$['id']"
										}
									},
									{
										"source": {
											"path": "$['changed']"
										},
										"sink": {
											"path": "$['changed']"
										}
									},
									{
										"source": {
											"path": "$['version']"
										},
										"sink": {
											"path": "$['version']"
										}
									},
									{
										"source": {
											"path": "$['resource_id']"
										},
										"sink": {
											"path": "$['resource_id']"
										}
									},
									{
										"source": {
											"path": "$['labourhist_id']"
										},
										"sink": {
											"path": "$['labourhist_id']"
										}
									},
									{
										"source": {
											"path": "$['rosterdate']"
										},
										"sink": {
											"path": "$['rosterdate']"
										}
									},
									{
										"source": {
											"path": "$['rosterline']"
										},
										"sink": {
											"path": "$['rosterline']"
										}
									},
									{
										"source": {
											"path": "$['shift_id']"
										},
										"sink": {
											"path": "$['shift_id']"
										}
									},
									{
										"source": {
											"path": "$['plannedprop_id']"
										},
										"sink": {
											"path": "$['plannedprop_id']"
										}
									},
									{
										"source": {
											"path": "$['overrulinggroup_id']"
										},
										"sink": {
											"path": "$['overrulinggroup_id']"
										}
									},
									{
										"source": {
											"path": "$['timetype_id']"
										},
										"sink": {
											"path": "$['timetype_id']"
										}
									},
									{
										"source": {
											"path": "$['starttime']"
										},
										"sink": {
											"path": "$['starttime']"
										}
									},
									{
										"source": {
											"path": "$['endtime']"
										},
										"sink": {
											"path": "$['endtime']"
										}
									},
									{
										"source": {
											"path": "$['starttimeminutes']"
										},
										"sink": {
											"path": "$['starttimeminutes']"
										}
									},
									{
										"source": {
											"path": "$['endtimeminutes']"
										},
										"sink": {
											"path": "$['endtimeminutes']"
										}
									},
									{
										"source": {
											"path": "$['workedhours']"
										},
										"sink": {
											"path": "$['workedhours']"
										}
									},
									{
										"source": {
											"path": "$['nr']"
										},
										"sink": {
											"path": "$['nr']"
										}
									},
									{
										"source": {
											"path": "$['timeintervalcount']"
										},
										"sink": {
											"path": "$['timeintervalcount']"
										}
									},
									{
										"source": {
											"path": "$['labourhistgroup_id']"
										},
										"sink": {
											"path": "$['labourhistgroup_id']"
										}
									},
									{
										"source": {
											"path": "$['originallabourhistgroup_id']"
										},
										"sink": {
											"path": "$['originallabourhistgroup_id']"
										}
									},
									{
										"source": {
											"path": "$['plannedresourcegroup_id']"
										},
										"sink": {
											"path": "$['plannedresourcegroup_id']"
										}
									},
									{
										"source": {
											"path": "$['hist_roster_id']"
										},
										"sink": {
											"path": "$['hist_roster_id']"
										}
									},
									{
										"source": {
											"path": "$['rdp_nr']"
										},
										"sink": {
											"path": "$['rdp_nr']"
										}
									},
									{
										"source": {
											"path": "$['GAVIN_IS_COOL']"
										},
										"sink": {
											"path": "$['GAVIN_IS_COOL']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hist_timeinterval",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_1al",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pipe_ref_resource",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "datafactory/input/hist_timeinterval_Ricky_is_Echt_heel_goed.json"
							},
							{
								"name": "Destination",
								"value": "datafactory/output/Intus_bewerkte_file"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"path": "$['id']"
										}
									},
									{
										"source": {
											"path": "$['changed']"
										},
										"sink": {
											"path": "$['changed']"
										}
									},
									{
										"source": {
											"path": "$['version']"
										},
										"sink": {
											"path": "$['version']"
										}
									},
									{
										"source": {
											"path": "$['resource_id']"
										},
										"sink": {
											"path": "$['resource_id']"
										}
									},
									{
										"source": {
											"path": "$['labourhist_id']"
										},
										"sink": {
											"path": "$['labourhist_id']"
										}
									},
									{
										"source": {
											"path": "$['rosterdate']"
										},
										"sink": {
											"path": "$['rosterdate']"
										}
									},
									{
										"source": {
											"path": "$['rosterline']"
										},
										"sink": {
											"path": "$['rosterline']"
										}
									},
									{
										"source": {
											"path": "$['shift_id']"
										},
										"sink": {
											"path": "$['shift_id']"
										}
									},
									{
										"source": {
											"path": "$['plannedprop_id']"
										},
										"sink": {
											"path": "$['plannedprop_id']"
										}
									},
									{
										"source": {
											"path": "$['overrulinggroup_id']"
										},
										"sink": {
											"path": "$['overrulinggroup_id']"
										}
									},
									{
										"source": {
											"path": "$['timetype_id']"
										},
										"sink": {
											"path": "$['timetype_id']"
										}
									},
									{
										"source": {
											"path": "$['starttime']"
										},
										"sink": {
											"path": "$['starttime']"
										}
									},
									{
										"source": {
											"path": "$['endtime']"
										},
										"sink": {
											"path": "$['endtime']"
										}
									},
									{
										"source": {
											"path": "$['starttimeminutes']"
										},
										"sink": {
											"path": "$['starttimeminutes']"
										}
									},
									{
										"source": {
											"path": "$['endtimeminutes']"
										},
										"sink": {
											"path": "$['endtimeminutes']"
										}
									},
									{
										"source": {
											"path": "$['workedhours']"
										},
										"sink": {
											"path": "$['workedhours']"
										}
									},
									{
										"source": {
											"path": "$['nr']"
										},
										"sink": {
											"path": "$['nr']"
										}
									},
									{
										"source": {
											"path": "$['timeintervalcount']"
										},
										"sink": {
											"path": "$['timeintervalcount']"
										}
									},
									{
										"source": {
											"path": "$['labourhistgroup_id']"
										},
										"sink": {
											"path": "$['labourhistgroup_id']"
										}
									},
									{
										"source": {
											"path": "$['originallabourhistgroup_id']"
										},
										"sink": {
											"path": "$['originallabourhistgroup_id']"
										}
									},
									{
										"source": {
											"path": "$['plannedresourcegroup_id']"
										},
										"sink": {
											"path": "$['plannedresourcegroup_id']"
										}
									},
									{
										"source": {
											"path": "$['hist_roster_id']"
										},
										"sink": {
											"path": "$['hist_roster_id']"
										}
									},
									{
										"source": {
											"path": "$['rdp_nr']"
										},
										"sink": {
											"path": "$['rdp_nr']"
										}
									},
									{
										"source": {
											"path": "$['GAVIN_IS_COOL']"
										},
										"sink": {
											"path": "$['GAVIN_IS_COOL']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ref_resource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_1al",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pipe_ref_resourcegroup",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "datafactory/input/hist_timeinterval_Ricky_is_Echt_heel_goed.json"
							},
							{
								"name": "Destination",
								"value": "datafactory/output/Intus_bewerkte_file"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"path": "$['id']"
										}
									},
									{
										"source": {
											"path": "$['changed']"
										},
										"sink": {
											"path": "$['changed']"
										}
									},
									{
										"source": {
											"path": "$['version']"
										},
										"sink": {
											"path": "$['version']"
										}
									},
									{
										"source": {
											"path": "$['resource_id']"
										},
										"sink": {
											"path": "$['resource_id']"
										}
									},
									{
										"source": {
											"path": "$['labourhist_id']"
										},
										"sink": {
											"path": "$['labourhist_id']"
										}
									},
									{
										"source": {
											"path": "$['rosterdate']"
										},
										"sink": {
											"path": "$['rosterdate']"
										}
									},
									{
										"source": {
											"path": "$['rosterline']"
										},
										"sink": {
											"path": "$['rosterline']"
										}
									},
									{
										"source": {
											"path": "$['shift_id']"
										},
										"sink": {
											"path": "$['shift_id']"
										}
									},
									{
										"source": {
											"path": "$['plannedprop_id']"
										},
										"sink": {
											"path": "$['plannedprop_id']"
										}
									},
									{
										"source": {
											"path": "$['overrulinggroup_id']"
										},
										"sink": {
											"path": "$['overrulinggroup_id']"
										}
									},
									{
										"source": {
											"path": "$['timetype_id']"
										},
										"sink": {
											"path": "$['timetype_id']"
										}
									},
									{
										"source": {
											"path": "$['starttime']"
										},
										"sink": {
											"path": "$['starttime']"
										}
									},
									{
										"source": {
											"path": "$['endtime']"
										},
										"sink": {
											"path": "$['endtime']"
										}
									},
									{
										"source": {
											"path": "$['starttimeminutes']"
										},
										"sink": {
											"path": "$['starttimeminutes']"
										}
									},
									{
										"source": {
											"path": "$['endtimeminutes']"
										},
										"sink": {
											"path": "$['endtimeminutes']"
										}
									},
									{
										"source": {
											"path": "$['workedhours']"
										},
										"sink": {
											"path": "$['workedhours']"
										}
									},
									{
										"source": {
											"path": "$['nr']"
										},
										"sink": {
											"path": "$['nr']"
										}
									},
									{
										"source": {
											"path": "$['timeintervalcount']"
										},
										"sink": {
											"path": "$['timeintervalcount']"
										}
									},
									{
										"source": {
											"path": "$['labourhistgroup_id']"
										},
										"sink": {
											"path": "$['labourhistgroup_id']"
										}
									},
									{
										"source": {
											"path": "$['originallabourhistgroup_id']"
										},
										"sink": {
											"path": "$['originallabourhistgroup_id']"
										}
									},
									{
										"source": {
											"path": "$['plannedresourcegroup_id']"
										},
										"sink": {
											"path": "$['plannedresourcegroup_id']"
										}
									},
									{
										"source": {
											"path": "$['hist_roster_id']"
										},
										"sink": {
											"path": "$['hist_roster_id']"
										}
									},
									{
										"source": {
											"path": "$['rdp_nr']"
										},
										"sink": {
											"path": "$['rdp_nr']"
										}
									},
									{
										"source": {
											"path": "$['GAVIN_IS_COOL']"
										},
										"sink": {
											"path": "$['GAVIN_IS_COOL']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ref_resourcegroup",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_1al",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-20T12:56:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hist_timeinterval')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_1al')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset_ref_resource')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset_ref_resourcegroup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SourceDataset_hist_timeinterval",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "SourceDataset_ref_resource",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          changed as string,",
						"          version as integer,",
						"          resource_id as integer,",
						"          labourhist_id as integer,",
						"          rosterdate as string,",
						"          rosterline as integer,",
						"          shift_id as integer,",
						"          plannedprop_id as integer,",
						"          overrulinggroup_id as string,",
						"          timetype_id as integer,",
						"          starttime as string,",
						"          endtime as string,",
						"          starttimeminutes as integer,",
						"          endtimeminutes as integer,",
						"          workedhours as double,",
						"          nr as integer,",
						"          timeintervalcount as integer,",
						"          labourhistgroup_id as integer,",
						"          originallabourhistgroup_id as integer,",
						"          plannedresourcegroup_id as integer,",
						"          hist_roster_id as integer,",
						"          rdp_nr as integer,",
						"          GAVIN_IS_COOL as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source(output(",
						"          id as integer,",
						"          changed as string,",
						"          version as integer,",
						"          deleted as integer,",
						"          externalid as string,",
						"          uname as string,",
						"          name as string,",
						"          resourcetype as integer,",
						"          resourcecolor as string,",
						"          firstname as string,",
						"          lastname as string,",
						"          lastnameprefix as string,",
						"          maidenname as string,",
						"          maidennameprefix as string,",
						"          birthdate as string,",
						"          gender as string,",
						"          email as string,",
						"          phone as string,",
						"          sms as string,",
						"          prefcontact as integer,",
						"          address_street as string,",
						"          address_housenumber as string,",
						"          address_housenumbersuffix as string,",
						"          address_postalcode as string,",
						"          address_locality as string,",
						"          address_countrycode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source2",
						"source1 filter(rosterline==4) ~> filter1",
						"filter1, source2 join(resource_id == source2@id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          rosterdate,",
						"          rosterline,",
						"          shift_id,",
						"          starttime,",
						"          uname,",
						"          name,",
						"          firstname,",
						"          lastname,",
						"          email",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hist_timeinterval')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset_ref_resource')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		}
	]
}