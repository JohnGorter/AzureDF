{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SourceDataset_hist_timeinterval",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SourceDataset_ref_resource",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          changed as string,",
				"          version as integer,",
				"          resource_id as integer,",
				"          labourhist_id as integer,",
				"          rosterdate as string,",
				"          rosterline as integer,",
				"          shift_id as integer,",
				"          plannedprop_id as integer,",
				"          overrulinggroup_id as string,",
				"          timetype_id as integer,",
				"          starttime as string,",
				"          endtime as string,",
				"          starttimeminutes as integer,",
				"          endtimeminutes as integer,",
				"          workedhours as double,",
				"          nr as integer,",
				"          timeintervalcount as integer,",
				"          labourhistgroup_id as integer,",
				"          originallabourhistgroup_id as integer,",
				"          plannedresourcegroup_id as integer,",
				"          hist_roster_id as integer,",
				"          rdp_nr as integer,",
				"          GAVIN_IS_COOL as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> source1",
				"source(output(",
				"          id as integer,",
				"          changed as string,",
				"          version as integer,",
				"          deleted as integer,",
				"          externalid as string,",
				"          uname as string,",
				"          name as string,",
				"          resourcetype as integer,",
				"          resourcecolor as string,",
				"          firstname as string,",
				"          lastname as string,",
				"          lastnameprefix as string,",
				"          maidenname as string,",
				"          maidennameprefix as string,",
				"          birthdate as string,",
				"          gender as string,",
				"          email as string,",
				"          phone as string,",
				"          sms as string,",
				"          prefcontact as integer,",
				"          address_street as string,",
				"          address_housenumber as string,",
				"          address_housenumbersuffix as string,",
				"          address_postalcode as string,",
				"          address_locality as string,",
				"          address_countrycode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> source2",
				"source1 filter(rosterline==4) ~> filter1",
				"filter1, source2 join(resource_id == source2@id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          rosterdate,",
				"          rosterline,",
				"          shift_id,",
				"          starttime,",
				"          uname,",
				"          name,",
				"          firstname,",
				"          lastname,",
				"          email",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1"
			]
		}
	}
}